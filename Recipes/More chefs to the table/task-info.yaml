type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
    import recipes.RecipesApplication;

    import java.util.*;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String category;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String category, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.category = category;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            // 0
            new Recipe(
                "Fresh Mint Tea /Test",
                "beverage /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),
            // 1
            new Recipe(
                "Warming Ginger Tea /Test",
                "beverage /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            ),
            // 2
            new Recipe(
                "ice-cream",
                "Dessert",
                "-",
                new String[]{"--", "---", "-"},
                new String[]{"----", "---"}
            ),
            // 3
            new Recipe(
                "tea r 4",
                "DesserT",
                "---",
                new String[]{"-", "----", "-"},
                new String[]{"----", "--", "--"}
            ),
            // 4
            new Recipe(
                "recipe ice-cream 5",
                "Desser",
                "---",
                new String[]{"-", "--", "-"},
                new String[]{"-", "--", "---"}
            ),
            // 5
            new Recipe(
                "--",
                "DeSSert",
                "---",
                new String[]{"---", "-", "--"},
                new String[]{"---", "-"}
            ),
            // 6
            new Recipe(
                "ICE-CREAM",
                "desserT",
                "----",
                new String[]{"-", "-", "--"},
                new String[]{"---", "--", "--"}
            ),
            // 7
            new Recipe(
                "---",
                "dessert",
                "--",
                new String[]{"-", "----"},
                new String[]{"-----", "-", "---"}
            ),
            // 8
            new Recipe(
                "9 recipe Tea test",
                "-",
                "----",
                new String[]{"-", "-", "----"},
                new String[]{"-----", "-", "--"}
            ),
            // 9
            new Recipe(
                "10 ice recipe test",
                "-",
                "--",
                new String[]{"----", "--;", "---"},
                new String[]{"--", "-"}
            ),
            // 10
            new Recipe(
                "11 ice-creamrecipe test",
                "veryDessert",
                "-",
                new String[]{"-", "--"},
                new String[]{"-----", "-", "---"}
            ),
            // 11
            new Recipe(
                "cream",
                "BEVerage",
                "--",
                new String[]{"---", "-", "-"},
                new String[]{"-", "--"}
            ),
            // 12
            new Recipe(
                "ice-cre",
                "---Dessert",
                "-",
                new String[]{"---", "-"},
                new String[]{"----", "-", "-"}
            ),

            // 13
            new Recipe(
                "ice-cream",
                "DESSERT",
                "-",
                new String[]{"----", "--"},
                new String[]{"-", "--", "-"}
            ),
            // 14
            new Recipe(
                "15 recipe test ice-CREAM",
                "Dessert",
                "-",
                new String[]{"-", "---'", "-----"},
                new String[]{"---", "-"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            //0
            new Recipe(
                null,
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //1
            new Recipe(
                "Fresh Mint Tea",
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //2
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //3
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //4
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),
            //5
            new Recipe(
                "  ",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //6
            new Recipe(
                "Fresh Mint Tea",
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //7
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),
            //8
            new Recipe(
                "Fresh Mint Tea",
                "beverage",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),
            //9
            new Recipe(
                "Warming Ginger Tea",
                "beverage",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };

        final Recipe[] RECIPES_CATEGORY_DESSERT_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[7], RECIPES[6],
            RECIPES[5], RECIPES[3], RECIPES[2]};

        final Recipe[] RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED = new Recipe[]{RECIPES[14], RECIPES[13], RECIPES[10], RECIPES[6],
            RECIPES[4], RECIPES[2]};

        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";
        final String API_RECIPE_SEARCH = "/api/recipe/search/";
        final String API_REGISTER = "/api/register";

        // recipes ids will be saved when testing POST requests and used later to test GET/PUT/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();

        final String CATEGORY = "category";
        final String NAME = "name";

        final static Gson gson = new Gson();

        final String[] MAIN_LOGIN_PASS = {"LoginTest2@test.com", "Test2222222"};
        final String[] ADDITIONAL_LOGIN_PASS_1 = {"LoginTest1@test.com", "Test1111"};
        final String[] ADDITIONAL_LOGIN_PASS_2 = {"LoginTest3@test.com", "Test33333333333"};

        final String[] INCORRECT_LOGIN_CORRECT_PASS_1 = {"Test3@testcom", "Test3333"};
        final String[] INCORRECT_LOGIN_CORRECT_PASS_2 = {"Test4test.com", "Test44444444"};

        final String[] CORRECT_LOGIN_INCORRECT_PASS_1 = {"Test5@test.com", "Test555"};
        final String[] CORRECT_LOGIN_INCORRECT_PASS_2 = {"Test6@test.com", "        "};

        final String[] UNREGISTERED_LOGIN_PASS = {"abc@test.com", "password99"};


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }

        static Map<String, String> generateUrlParams(int len) {
            Map<String, String> params = new LinkedHashMap<>();

            for (int i = 0; i < len; i++) {
                params.put("key" + i, "value" + i);
            }

            return params;
        }

        static void sleep(int milliseconds) {
            try {
                Thread.sleep(milliseconds);
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }
        }

        static JsonArrayBuilder recipesToJsonArrayBuilder(Recipe[] recipes) {
            JsonArrayBuilder isArray = isArray();

            // just appends "item"(s)
            for (Recipe recipe : recipes) {

                isArray = isArray.item(
                    isObject()
                        .value("name", isString(recipe.name))
                        .value("category", isString(recipe.category))
                        .value("date", isString(d -> d.length() >= 8))
                        .value("description", isString(recipe.description))
                        .value("ingredients", isArray(recipe.ingredients))
                        .value("directions", isArray(recipe.directions)));
            }

            return isArray;
        }

        public HttpRequest addAuthUnregisteredUser(HttpRequest request) {
            return request.basicAuth(UNREGISTERED_LOGIN_PASS[0], UNREGISTERED_LOGIN_PASS[1]);
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_1, 400),
            () -> testPostRegister(MAIN_LOGIN_PASS, 200),
            () -> testPostRegister(ADDITIONAL_LOGIN_PASS_2, 200),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_1, 400),
            () -> testPostRegister(INCORRECT_LOGIN_CORRECT_PASS_2, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_1, 400),
            () -> testPostRegister(CORRECT_LOGIN_INCORRECT_PASS_2, 400),

            // Tests with authentication
            () -> testPostRecipe(JSON_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostRecipe(JSON_RECIPES[1], MAIN_LOGIN_PASS),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testUpdateRecipe(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testGetRecipe(recipeIds.get(0), RECIPES[1], MAIN_LOGIN_PASS),

            () -> testDeleteRecipe(recipeIds.get(0), MAIN_LOGIN_PASS),

            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0), MAIN_LOGIN_PASS),
            () -> testUpdateRecipeNotFoundStatusCode(recipeIds.get(0), JSON_RECIPES[1], MAIN_LOGIN_PASS),


            // Add more recipes before testing if elems sorted correctly by date.
            // Sleep calls added because tests send requests very quickly and this can produce duplicate dates in rare cases.
            // And if a user uses "unstable" sort to sort recipes, tests will be unstable. Thread sleep prevents duplicates.
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[2], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[3], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[4], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[5], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[6], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[7], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[8], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[9], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[10], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[11], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[12], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[13], MAIN_LOGIN_PASS);
            },
            () -> {
                sleep(10);
                return testPostRecipe(JSON_RECIPES[14], MAIN_LOGIN_PASS);
            },

            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", MAIN_LOGIN_PASS),

            () -> testGetRecipesByCategorySorted(new Recipe[]{}, "should_return_empty_array_1", MAIN_LOGIN_PASS),
            () -> testGetRecipesByNameContainsSorted(new Recipe[]{}, "should_return_empty_array_2", MAIN_LOGIN_PASS),

            () -> testGetRecipesBadRequestStatusCode(0, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(1, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(2, MAIN_LOGIN_PASS),
            () -> testGetRecipesBadRequestStatusCode(5, MAIN_LOGIN_PASS),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),

            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[0], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[1], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[2], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[3], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[4], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[5], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[6], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[7], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[8], MAIN_LOGIN_PASS),
            () -> testUpdateIncorrectRecipeStatusCode(recipeIds.get(1), JSON_INCORRECT_RECIPES[9], MAIN_LOGIN_PASS),
            this::reloadServer,

            // Use second registered user to check if endpoints are available.
            () -> testPostRecipe(JSON_RECIPES[0], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1], ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByCategorySorted(RECIPES_CATEGORY_DESSERT_REVERSED, "dessert", ADDITIONAL_LOGIN_PASS_1),
            () -> testGetRecipesByNameContainsSorted(RECIPES_NAME_CONTAINS_ICE_CREAM_REVERSED, "ice-cream", ADDITIONAL_LOGIN_PASS_1),
            // Use third registered user to check forbidden status code.
            () -> testDeleteRecipeForbiddenStatusCode(recipeIds.get(1), ADDITIONAL_LOGIN_PASS_2),
            () -> testUpdateRecipeForbiddenStatusCode(recipeIds.get(1), JSON_RECIPES[2], ADDITIONAL_LOGIN_PASS_2),

            // unregistered login and pass
            () -> testPostRecipeUnregisteredUser(JSON_RECIPES[0]),
            () -> testGetRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testUpdateRecipeUnregisteredUser(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeUnregisteredUser(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedUnregisteredUser("dessert"),
            () -> testGetRecipesByNameContainsSortedUnregisteredUser("ice-cream"),

            // without authentication
            () -> testPostRecipeNoAuth(JSON_RECIPES[0]),
            () -> testGetRecipeNoAuth(recipeIds.get(0)),
            () -> testUpdateRecipeNoAuth(recipeIds.get(0), JSON_RECIPES[1]),
            () -> testDeleteRecipeNoAuth(recipeIds.get(0)),
            () -> testGetRecipesByCategorySortedNoAuth("dessert"),
            () -> testGetRecipesByNameContainsSortedNoAuth("ice-cream")
        };

        CheckResult testPostRegister(String[] loginAndPass, int statusCode) {
            final String JSON_LOGIN_PASS = "{\"email\":\"" + loginAndPass[0] + "\",\"password\":\"" + loginAndPass[1] + "\"}";

            HttpResponse response = post(API_REGISTER, JSON_LOGIN_PASS).send();

            throwIfIncorrectStatusCode(response, statusCode);

            return correct();
        }

        // Tests with authentication
        CheckResult testPostRecipe(String jsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("category", isString(recipe.category))
                    .value("date", isString(d -> d.length() >= 8))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testUpdateRecipe(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testGetRecipesByCategorySorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSorted(Recipe[] recipes, String paramValue, String[] loginPass) {
            HttpResponse response = get(API_RECIPE_SEARCH).basicAuth(loginPass[0], loginPass[1]).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                recipesToJsonArrayBuilder(recipes)
            );

            return correct();
        }

        // Status codes tests with authentication
        CheckResult testGetRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = get(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testUpdateRecipeNotFoundStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipesBadRequestStatusCode(int numberOfQueryParams, String[] loginPass) {
            Map<String, String> params = generateUrlParams(numberOfQueryParams);

            HttpResponse response = get(API_RECIPE_SEARCH).addParams(params).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testUpdateIncorrectRecipeStatusCode(int recipeId, String incorrectJsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, incorrectJsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }

        CheckResult testDeleteRecipeForbiddenStatusCode(int recipeId, String[] loginPass) {
            HttpResponse response = delete(API_RECIPE + recipeId).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        CheckResult testUpdateRecipeForbiddenStatusCode(int recipeId, String jsonRecipe, String[] loginPass) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).basicAuth(loginPass[0], loginPass[1]).send();

            throwIfIncorrectStatusCode(response, 403);

            return correct();
        }

        // Not registered user tests
        CheckResult testPostRecipeUnregisteredUser(String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(post(API_RECIPE_NEW, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeUnregisteredUser(int recipeId, String jsonRecipe) {
            HttpResponse response = addAuthUnregisteredUser(put(API_RECIPE + recipeId, jsonRecipe)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeUnregisteredUser(int recipeId) {
            HttpResponse response = addAuthUnregisteredUser(delete(API_RECIPE + recipeId)).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedUnregisteredUser(String paramValue) {
            HttpResponse response = addAuthUnregisteredUser(get(API_RECIPE_SEARCH)).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        // No authentication tests
        CheckResult testPostRecipeNoAuth(String jsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipeNoAuth(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testUpdateRecipeNoAuth(int recipeId, String jsonRecipe) {
            HttpResponse response = put(API_RECIPE + recipeId, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testDeleteRecipeNoAuth(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }

        CheckResult testGetRecipesByCategorySortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(CATEGORY, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);


            return correct();
        }

        private CheckResult testGetRecipesByNameContainsSortedNoAuth(String paramValue) {
            HttpResponse response = get(API_RECIPE_SEARCH).addParam(NAME, paramValue).send();

            throwIfIncorrectStatusCode(response, 401);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/repositorys/RecipeRepository.java
  visible: true
  text: |
    package recipes;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RecipeRepository extends CrudRepository<Recipe, Long> {
        Recipe[] findAllByCategoryIgnoreCaseOrderByDateDesc(String category);
        Recipe[] findAllByNameContainingIgnoreCaseOrderByDateDesc(String s);
    }
  learner_created: true
- name: src/recipes/repositorys/UserRepository.java
  visible: true
  learner_created: true
- name: src/recipes/models/Recipe.java
  visible: true
  text: |-
    package recipes;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.time.LocalDateTime;

    @Entity
    @Data
    public class Recipe {
        @Id
        @GeneratedValue
        @JsonIgnore
        private long id;

        @NotBlank
        private String name;

        @NotBlank
        private String category;

        private LocalDateTime date;

        @NotBlank
        private String description;

        @NotNull
        @Size(min = 1)
        private String[] ingredients;

        @NotNull
        @Size(min = 1)
        private String[] directions;

        public Recipe(){}

        public Recipe(long id, String name, String category, LocalDateTime date, String description, @NotNull @Size(min = 1) String[] ingredients, @NotNull @Size(min = 1) String[] directions) {
            this.id = id;
            this.name = name;
            this.category = category;
            this.date = date;
            this.description = description;
            this.ingredients = ingredients;
            this.directions = directions;
        }

        @PrePersist
        protected void onCreate() {
            date = LocalDateTime.now();
        }

        @PreUpdate
        protected void onUpdate() {
            date = LocalDateTime.now();
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getCategory() {
            return category;
        }

        public void setCategory(String category) {
            this.category = category;
        }

        public LocalDateTime getDate() {
            return date;
        }

        public void setDate(LocalDateTime date) {
            this.date = date;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String[] getIngredients() {
            return ingredients;
        }

        public void setIngredients(String[] ingredients) {
            this.ingredients = ingredients;
        }

        public String[] getDirections() {
            return directions;
        }

        public void setDirections(String[] directions) {
            this.directions = directions;
        }
    }
  learner_created: true
- name: src/recipes/models/User.java
  visible: true
  learner_created: true
- name: src/recipes/controllers/UserController.java
  visible: true
  learner_created: true
- name: src/recipes/controllers/RecipeController.java
  visible: true
  text: |-
    package recipes;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.Map;
    import java.util.Optional;


    @RestController
    public class RecipesController {

        private final RecipesService recipesService;

        @Autowired
        public RecipesController(RecipesService recipesService) {
            this.recipesService = recipesService;
        }

        @PostMapping("/api/recipe/new")
        public ResponseEntity<Map<String, Long>> postRecipe(@RequestBody @Valid Recipe recipe) {
            recipe = recipesService.newRecipe(recipe);
            return ResponseEntity.ok(Map.of("id", recipe.getId()));
        }

        @PutMapping("/api/recipe/{id}")
        @ResponseStatus(value = HttpStatus.NO_CONTENT)
        public void putRecipe(@PathVariable Long id, @RequestBody @Valid Recipe recipe) {
            Optional<Recipe> oldRecipe = recipesService.getRecipeById(id);
            if (oldRecipe.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND);
            }
            recipe.setId(id);
            recipesService.updateRecipe(recipe);
        }

        @GetMapping("/api/recipe/{id}")
        public ResponseEntity<Recipe> getRecipeById(@PathVariable Long id) {
            Optional<Recipe> recipe = recipesService.getRecipeById(id);
            return recipe.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
        }

        @GetMapping("/api/recipe/search")
        public Recipe[] getRecipeById(@RequestParam(value = "category", required = false) String category,
                                      @RequestParam(value = "name", required = false) String name) {
            if (category != null && name != null || category == null && name == null) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }
            Recipe[] recipes;
            if (category != null) {
                if (category.trim().length() >= 1) {
                    recipes = recipesService.getRecipesByCategory(category);
                } else {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
                }
            } else {
                if (name.trim().length() >= 1) {
                    recipes = recipesService.getRecipesByName(name);
                } else {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
                }
            }
            return recipes;
        }

        @DeleteMapping("/api/recipe/{id}")
        @ResponseStatus(value = HttpStatus.NO_CONTENT)
        public ResponseEntity<Recipe> deleteRecipe(@PathVariable Long id) {
            Optional<Recipe> recipe = recipesService.getRecipeById(id);
            if (recipe.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND);
            }
            recipesService.deleteRecipeById(id);
            return ResponseEntity.noContent().build();
        }
    }
  learner_created: true
- name: src/recipes/security/BCryptEncoderConfig.java
  visible: true
  learner_created: true
- name: src/recipes/security/SecurityConfig.java
  visible: true
  learner_created: true
- name: ./build.gradle
  visible: true
  text: |
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/recipes/services/RecipeService.java
  visible: true
  learner_created: true
- name: src/recipes/services/impl/RecipeServiceImpl.java
  visible: true
  learner_created: true
- name: src/recipes/services/impl/UserServiceImpl.java
  visible: true
  learner_created: true
- name: test/recipes/services/impl/RecipeServiceImplTest.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/180/stages/921/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #16\n\nPUT /api/recipe/1 should respond with status\
    \ code 204, responded: 500\n\nResponse body:\n{&quot;timestamp&quot;:&quot;2021-09-22T12:42:24.777+00:00&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal\
    \ Server Error&quot;,&quot;message&quot;:&quot;&quot;,&quot;path&quot;:&quot;/api/recipe/1&quot;}\n\
    \nPlease find below the output of your program during this failed test.\n\n---\n\
    \n[last 250 lines of output are shown, 19 skipped]\n2021-09-22 15:42:15.428  INFO\
    \ 9108 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1\
    \ - Start completed.\n2021-09-22 15:42:15.442  INFO 9108 --- [    Test worker]\
    \ o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;.\
    \ Database available at &#39;jdbc:h2:file:../recipes_db&#39;\n2021-09-22 15:42:15.658\
    \  INFO 9108 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  :\
    \ Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2021-09-22 15:42:15.805\
    \  INFO 9108 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  :\
    \ HHH000204: Processing PersistenceUnitInfo [name: default]\n2021-09-22 15:42:15.883\
    \  WARN 9108 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2021-09-22 15:42:15.942  INFO 9108 --- [         task-1]\
    \ org.hibernate.Version                    : HHH000412: Hibernate ORM core version\
    \ 5.4.17.Final\n2021-09-22 15:42:16.228  INFO 9108 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7469b346,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@4a8348fe,\
    \ org.springframework.security.web.header.HeaderWriterFilter@39fe5d8c, org.springframework.security.web.authentication.logout.LogoutFilter@72c7405b,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@43f81798,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5d21097c,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@56685fd8,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4de4e23a,\
    \ org.springframework.security.web.session.SessionManagementFilter@52ae89d6, org.springframework.security.web.access.ExceptionTranslationFilter@4a73dca7,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@63f2ddf3]\n\
    2021-09-22 15:42:16.229  INFO 9108 --- [         task-1] o.hibernate.annotations.common.Version\
    \   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}\n2021-09-22 15:42:16.503\
    \  INFO 9108 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2021-09-22 15:42:18.004\
    \  INFO 9108 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       :\
    \ HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2021-09-22 15:42:18.015  INFO 9108 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2021-09-22 15:42:18.110  INFO 9108 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2021-09-22\
    \ 15:42:18.187  INFO 9108 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;\n2021-09-22\
    \ 15:42:18.190  INFO 9108 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2021-09-22\
    \ 15:42:18.701  INFO 9108 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2021-09-22 15:42:18.723  INFO 9108\
    \ --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication\
    \ in 7.483 seconds (JVM running for 8.745)\n2021-09-22 15:42:19.257  INFO 9108\
    \ --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2021-09-22 15:42:19.257\
    \  INFO 9108 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2021-09-22 15:42:19.271  INFO\
    \ 9108 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 14 ms\n2021-09-22 15:42:19.897  WARN 9108 --- [nio-8881-exec-2]\
    \ o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 23505, SQLState: 23505\n\
    2021-09-22 15:42:19.897 ERROR 9108 --- [nio-8881-exec-2] o.h.engine.jdbc.spi.SqlExceptionHelper\
    \   : Unique index or primary key violation: &quot;PUBLIC.UK_6DOTKOTT2KJSP8VW4D0M25FB7_INDEX_4\
    \ ON PUBLIC.USERS(EMAIL) VALUES 1&quot;; SQL statement:\ninsert into users (id,\
    \ email, password, username) values (null, ?, ?, ?) [23505-200]\n2021-09-22 15:42:20.197\
    \  WARN 9108 --- [nio-8881-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver :\
    \ Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public void recipes.controllers.UserController.register(recipes.models.User):\
    \ [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value\
    \ [Test3@testcom]; codes [Email.user.email,Email.email,Email.java.lang.String,Email];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@1d813ed7,.+@.+\\\
    ..+]; default message [User email is not correct]] ]\n2021-09-22 15:42:20.211\
    \  WARN 9108 --- [nio-8881-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver :\
    \ Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public void recipes.controllers.UserController.register(recipes.models.User):\
    \ [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value\
    \ [Test4test.com]; codes [Email.user.email,Email.email,Email.java.lang.String,Email];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@1d813ed7,.+@.+\\\
    ..+]; default message [User email is not correct]] ]\n2021-09-22 15:42:20.227\
    \  WARN 9108 --- [nio-8881-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver :\
    \ Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public void recipes.controllers.UserController.register(recipes.models.User):\
    \ [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected\
    \ value [Test555]; codes [Size.user.password,Size.password,Size.java.lang.String,Size];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password],2147483647,8];\
    \ default message [Password must contain at least eight characters]] ]\n2021-09-22\
    \ 15:42:20.262  WARN 9108 --- [nio-8881-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver\
    \ : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation\
    \ failed for argument [0] in public void recipes.controllers.UserController.register(recipes.models.User):\
    \ [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected\
    \ value [        ]; codes [NotBlank.user.password,NotBlank.password,NotBlank.java.lang.String,NotBlank];\
    \ arguments [org.springframework.context.support.DefaultMessageSourceResolvable:\
    \ codes [user.password,password]; arguments []; default message [password]]; default\
    \ message [must not be blank]] ]\n2021-09-22 15:42:21.818  INFO 9108 --- [   \
    \  Thread-336] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory\
    \ for persistence unit &#39;default&#39;\n2021-09-22 15:42:21.818  INFO 9108 ---\
    \ [     Thread-336] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService\
    \ &#39;applicationTaskExecutor&#39;\n2021-09-22 15:42:21.818  INFO 9108 --- [\
    \     Thread-336] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown\
    \ initiated...\n2021-09-22 15:42:22.319  INFO 9108 --- [     Thread-336] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Shutdown completed.\n\n  .   ____          _        \
    \    __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ |\
    \ &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | ||\
    \ (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\
    \ :: Spring Boot ::        (v2.3.1.RELEASE)\n\n2021-09-22 15:42:22.457  INFO 9108\
    \ --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication\
    \ on AISIX2 with PID 9108 (started by Windows 10 in D:\\Hyperskill\\Recipes\\\
    Recipes\\task)\n2021-09-22 15:42:22.457  INFO 9108 --- [    Test worker] recipes.RecipesApplication\
    \               : No active profile set, falling back to default profiles: default\n\
    2021-09-22 15:42:23.074  INFO 9108 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate\
    \ : Bootstrapping Spring Data JPA repositories in DEFERRED mode.\n2021-09-22 15:42:23.090\
    \  INFO 9108 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate :\
    \ Finished Spring Data repository scanning in 14ms. Found 2 JPA repository interfaces.\n\
    2021-09-22 15:42:23.280  INFO 9108 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat initialized with port(s): 8881 (http)\n2021-09-22 15:42:23.282  INFO\
    \ 9108 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting\
    \ service [Tomcat]\n2021-09-22 15:42:23.283  INFO 9108 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.36]\n2021-09-22 15:42:23.329\
    \  INFO 9108 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2021-09-22 15:42:23.330\
    \  INFO 9108 --- [    Test worker] w.s.c.ServletWebServerApplicationContext :\
    \ Root WebApplicationContext: initialization completed in 858 ms\n2021-09-22 15:42:23.419\
    \  INFO 9108 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       :\
    \ HikariPool-2 - Starting...\n2021-09-22 15:42:23.434  INFO 9108 --- [    Test\
    \ worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.\n\
    2021-09-22 15:42:23.434  INFO 9108 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration\
    \    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../recipes_db&#39;\n\
    2021-09-22 15:42:23.518  INFO 9108 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor\
    \  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n2021-09-22\
    \ 15:42:23.523  INFO 9108 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper\
    \  : HHH000204: Processing PersistenceUnitInfo [name: default]\n2021-09-22 15:42:23.536\
    \  INFO 9108 --- [         task-1] org.hibernate.dialect.Dialect            :\
    \ HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n2021-09-22 15:42:23.608\
    \  WARN 9108 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration :\
    \ spring.jpa.open-in-view is enabled by default. Therefore, database queries may\
    \ be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2021-09-22 15:42:23.730  INFO 9108 --- [         task-1]\
    \ o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation:\
    \ [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n2021-09-22\
    \ 15:42:23.732  INFO 9108 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain\
    \     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6f7bccf0,\
    \ org.springframework.security.web.context.SecurityContextPersistenceFilter@2f355c03,\
    \ org.springframework.security.web.header.HeaderWriterFilter@493ab7b4, org.springframework.security.web.authentication.logout.LogoutFilter@2ba26673,\
    \ org.springframework.security.web.authentication.www.BasicAuthenticationFilter@669700eb,\
    \ org.springframework.security.web.savedrequest.RequestCacheAwareFilter@74e733e7,\
    \ org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@687cadd8,\
    \ org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47a84378,\
    \ org.springframework.security.web.session.SessionManagementFilter@2b5db2a7, org.springframework.security.web.access.ExceptionTranslationFilter@4cd2fb71,\
    \ org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6fe117a2]\n\
    2021-09-22 15:42:23.764  INFO 9108 --- [         task-1] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2021-09-22 15:42:24.011  INFO 9108 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2021-09-22\
    \ 15:42:24.042  INFO 9108 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 8881 (http) with context path &#39;&#39;\n2021-09-22\
    \ 15:42:24.042  INFO 9108 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Triggering deferred initialization of Spring Data repositories…\n2021-09-22\
    \ 15:42:24.120  INFO 9108 --- [    Test worker] DeferredRepositoryInitializationListener\
    \ : Spring Data repositories initialized!\n2021-09-22 15:42:24.129  INFO 9108\
    \ --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication\
    \ in 1.77 seconds (JVM running for 14.151)\n2021-09-22 15:42:24.138  INFO 9108\
    \ --- [nio-8881-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing\
    \ Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2021-09-22 15:42:24.138\
    \  INFO 9108 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Initializing Servlet &#39;dispatcherServlet&#39;\n2021-09-22 15:42:24.143  INFO\
    \ 9108 --- [nio-8881-exec-1] o.s.web.servlet.DispatcherServlet        : Completed\
    \ initialization in 4 ms\n2021-09-22 15:42:24.747 ERROR 9108 --- [nio-8881-exec-3]\
    \ o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet]\
    \ in context with path [] threw exception [Request processing failed; nested exception\
    \ is java.lang.NullPointerException] with root cause\n\njava.lang.NullPointerException:\
    \ null\n\tat recipes.services.impl.RecipeServiceImpl.updateRecipe(RecipeServiceImpl.java:64)\
    \ ~[main/:na]\n\tat recipes.controllers.RecipeController.updateRecipe(RecipeController.java:45)\
    \ ~[main/:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\
    \ ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:920)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:663)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\
    \ ~[spring-webmvc-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat jdk.internal.reflect.GeneratedMethodAccessor61.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:170)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:225)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\
    \ ~[tomcat-embed-websocket-9.0.36.jar:9.0.36]\n\tat jdk.internal.reflect.GeneratedMethodAccessor55.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:204)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\
    \ ~[spring-security-web-5.3.3.RELEASE.jar:5.3.3.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat jdk.internal.reflect.GeneratedMethodAccessor55.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat jdk.internal.reflect.GeneratedMethodAccessor55.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat jdk.internal.reflect.GeneratedMethodAccessor55.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:93)\
    \ ~[spring-boot-actuator-2.3.1.RELEASE.jar:2.3.1.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat jdk.internal.reflect.GeneratedMethodAccessor55.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\
    \ ~[spring-web-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat jdk.internal.reflect.GeneratedMethodAccessor55.invoke(Unknown\
    \ Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\
    \ ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:282) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat org.apache.catalina.security.SecurityUtil$1.run(SecurityUtil.java:279) ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\
    \tat java.base/java.security.AccessController.doPrivileged(Native Method) ~[na:na]\n\
    \tat java.base/javax.security.auth.Subject.doAsPrivileged(Subject.java:550) ~[na:na]\n\
    \tat org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:314)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:191)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:47)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:149)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:145)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.security.AccessController.doPrivileged(Native\
    \ Method) ~[na:na]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:144)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\
    \ ~[na:na]\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\
    \ ~[na:na]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\
    \ ~[tomcat-embed-core-9.0.36.jar:9.0.36]\n\tat java.base/java.lang.Thread.run(Thread.java:829)\
    \ ~[na:na]"
  time: Wed, 22 Sep 2021 12:42:25 UTC
record: -1
